@model IEnumerable<Message>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_MailLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">

                    <div class="email-left-box px-0 mb-5">
                        <div class="p-0">
                            <!-- Yeni Mesaj Butonu -->
                            <a href="javascript:void(0);" class="btn btn-primary btn-block" onclick="showCompose()">Yeni Mesaj</a>
                        </div>
                        <div class="mail-list mt-4">
                            <a href="javascript:void(0);" id="inboxLink" class="list-group-item active" onclick="activateTab('inboxLink', 'sentLink'); loadInbox();">
                                <i class="fa fa-inbox font-18 align-middle mr-2"></i> Gelen Kutusu
                            </a>
                            <a href="javascript:void(0);" id="sentLink" class="list-group-item" onclick="activateTab('sentLink', 'inboxLink'); loadSentMessages();">
                                <i class="fa fa-paper-plane font-18 align-middle mr-2"></i> Giden Kutusu
                            </a>
                        </div>

                        <div class="intro-title d-flex justify-content-between">
                            <h5>Categories</h5>
                            <i class="icon-arrow-down" aria-hidden="true"></i>
                        </div>
                        <div class="mail-list mt-4">
                            @if (ViewBag.categories != null)
                            {
                                foreach (var item in (List<Category>)ViewBag.categories)
                                {
                                    <a href="javascript:void(0);"
                                       class="list-group-item list-group-item-action d-flex align-items-center"
                                       onclick="loadCategoryMessages(@item.CategoryId)">
                                        <span class="icon-warning me-2">
                                            <i class="fa fa-circle" aria-hidden="true"></i>
                                        </span>
                                        @item.CategoryName
                                    </a>
                                }
                            }
                        </div>
                    </div>

                    <div class="email-right-box ml-0 ml-sm-4 ml-sm-0">

                        <div id="email-detail">
                        </div>

                        <div class="compose-content d-none">
                            <form id="composeForm" method="post">
                                <div class="form-group">
                                    <input type="text" class="form-control label label-primary" placeholder="To:" name="Recipients" data-role="tagsinput">
                                </div>
                                <div class="form-group">
                                    <input type="text" class="form-control bg-transparent" placeholder="Subject:" name="Subject">
                                </div>
                                <div class="form-group">
                                    <textarea id="email-compose-editor" class="textarea_editor form-control bg-transparent" rows="8" placeholder="Enter text ..." name="Content"></textarea>
                                </div>
                                <div class="mt-3">
                                    <button type="button" class="btn btn-primary" onclick="sendMail()">Gönder</button>
                                    <button type="button" class="btn btn-secondary" onclick="cancelCompose()">İptal</button>
                                </div>
                            </form>
                        </div>

                        <div id="email-list-container" class="email-list mt-4">

                            @foreach (var item in Model)
                            {
                                <div class="message">
                                    <div>
                                        <div class="d-flex message-single">
                                            <div class="custom-control custom-checkbox pl-4">
                                                <input type="checkbox">
                                            </div>
                                            <div class="ml-2">
                                                <button class="border-0 bg-transparent align-middle p-0">
                                                    <i class="fa fa-star" aria-hidden="true"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <a href="javascript:void(0);" class="col-mail col-mail-2" onclick="loadMailDetail(@item.MessageId)">
                                            <div class="subject">@item.Content</div>
                                            <div class="date">@item.SentDate.ToShortTimeString()</div>
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-tagsinput/0.8.0/bootstrap-tagsinput.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-tagsinput/0.8.0/bootstrap-tagsinput.min.js"></script>

    <script>
        function showCompose() {
            const composeArea = document.querySelector('.compose-content');
            composeArea.classList.remove('d-none');

            // Listeyi gizle
            const emailList = document.getElementById('email-list-container');
            if (emailList) {
                emailList.classList.add('d-none');
            }
        }


        function cancelCompose() {
            const composeArea = document.querySelector('.compose-content');
            composeArea.classList.add('d-none');
            document.getElementById('composeForm').reset();


            const emailList = document.getElementById('email-list-container');

            if (emailList) {
                emailList.classList.remove('d-none');
            }
        }


        function sendMail() {

            const form = document.getElementById('composeForm');
            const formData = new FormData(form);

            fetch('/Message/SendMail', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Mesaj başarıyla gönderildi.');
                        cancelCompose();
                        loadInbox();
                    } else {
                        alert('Mesaj gönderilemedi: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Hata:', error);
                    alert('Mesaj gönderilemedi. Lütfen tekrar deneyin.');
                });
        }


        function loadInbox() {
            fetch('/Message/GetInboxMessages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server error: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.success === false) {
                        console.error('Error from server:', data.message);
                        renderErrorMessage(data.message);
                    } else {
                        renderMessages(data);
                    }

                    // Liste görünür hale gelsin
                    const emailList = document.getElementById('email-list-container');
                    if (emailList) {
                        emailList.classList.remove('d-none');
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    renderErrorMessage('Mesajlar yüklenemedi.');
                });

            cancelCompose()
        }

        function loadSentMessages() {
            fetch('/Message/GetSentMessages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server error: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.success === false) {
                        console.error('Error from server:', data.message);
                        renderErrorMessage(data.message);
                    } else {
                        renderMessages(data);
                    }

                    // Listeyi görünür hale getir
                    const emailList = document.getElementById('email-list-container');
                    if (emailList) {
                        emailList.classList.remove('d-none');
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    renderErrorMessage('Mesajlar yüklenemedi.');
                });

            cancelCompose()
        }

        function loadCategoryMessages(categoryId) {
            fetch('/Message/GetCategoryMessages?categoryId=' + categoryId)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server error: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.success === false) {
                        console.error('Error from server:', data.message);
                        renderErrorMessage(data.message);
                    } else {
                        renderMessages(data);
                    }

                    // Listeyi görünür hale getir
                    const emailList = document.getElementById('email-list-container');
                    if (emailList) {
                        emailList.classList.remove('d-none');
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    renderErrorMessage('Mesajlar yüklenemedi.');
                });

            cancelCompose()
        }

        function loadMailDetail(messageId) {


            fetch('/Message/GetMail?messageId=' + messageId)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server error: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success === false) {
                        console.error('Error from server:', data.message);
                        renderErrorMessage(data.message);
                    } else {
                        rendermail(data);
                    }
                    const emailList = document.getElementById('email-list-container');
                    if (emailList) {
                        emailList.classList.add('d-none');
                    }

                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    renderErrorMessage('Mesaj yüklenemedi.');
                });

            cancelCompose();
        }
        function rendermail(mail) {
            const container = document.getElementById('email-detail');
            container.innerHTML = '';

            const date = new Date(mail.SentDate);
            const timeString = !isNaN(date)
                ? date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
                : 'Invalid Date';

          
            const senderInfo = mail.Sender
                ? `
                    <p>
                        <strong>From:</strong> ${mail.Sender.Name} ${mail.Sender.Surname} (${mail.Sender.Email})
                    </p>
                `
                : '<p>Gönderici bilgisi bulunamadı.</p>';

       
            const recipientInfo = mail.Recipent && Array.isArray(mail.Recipent)
                ? `
                    <p>
                        <strong>To:</strong>
                        ${mail.Recipent.map(r => `${r.Name} ${r.Surname} (${r.Mail})`).join(', ')}
                    </p>
                `
                : '<p>Alıcı bilgisi bulunamadı.</p>';

            
            const messageHtml = `
                <div class="read-content">
                    <div class="media mb-4 mt-5">
                        <div class="media-body">
                            <span class="pull-right">${timeString}</span>
                            <h5 class="my-1 text-primary">${mail.Subject || "No Subject"}</h5>
                        </div>
                    </div>
                    <div class="read-content-sender">
                        ${senderInfo}
                        ${recipientInfo}
                    </div>
                    <div class="read-content-body mt-4">
                        ${mail.Content || "No Content Available"}
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', messageHtml);
        }





        function renderMessages(messages) {
            const container = document.getElementById('email-list-container');
            const detail = document.getElementById('email-detail');
            detail.innerHTML = '';
            container.innerHTML = '';

            if (!Array.isArray(messages)) {
                renderErrorMessage('Mesajlar beklenen formatta gelmedi.');
                return;
            }

            messages.forEach(item => {
                const date = new Date(item.SentDate);
                const timeString = !isNaN(date)
                    ? date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
                    : 'Invalid Date';

                const messageHtml = `
                    <div class="message">
                        <div>
                            <div class="d-flex message-single">
                                <div class="custom-control custom-checkbox pl-4">
                                    <input type="checkbox">
                                </div>
                                <div class="ml-2">
                                    <button class="border-0 bg-transparent align-middle p-0">
                                        <i class="fa fa-star" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                            <a href="javascript:void(0);" class="col-mail col-mail-2" onclick="loadMailDetail(${item.MessageId})">
                                <div class="subject">${item.Content}</div>
                                <div class="date">${timeString}</div>
                            </a>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', messageHtml);
            });
        }

        function renderErrorMessage(msg) {
            const container = document.getElementById('email-list-container');
            container.innerHTML = `<div class="alert alert-danger">${msg}</div>`;
        }


        function activateTab(activeId, inactiveId) {
            var activeLink = document.getElementById(activeId);
            var inactiveLink = document.getElementById(inactiveId);

            activeLink.classList.remove('active');
            inactiveLink.classList.remove('active');

            activeLink.classList.add('active');
        }
    </script>
}
